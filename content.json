[{"title":"OpenMediaVault安装","date":"2020-05-21T12:06:00.000Z","path":"2020/05/21/14/","text":"OpenMediaVault安装 首先配置OpenMediaVault的源到Debian中 $ echo “deb http://packages.openmediavault.org/public kralizec main” &gt; /etc/apt/sources.list.d/openmediavault.list 然后把OpenMediaVault软件仓库的认证信息配置到系统中（否则不能下载数据） $ wget -O - http://packages.openmediavault.org/public/archive.key | apt-key add - 现在就可以更新软件库信息，并安装OpenMediaVault了 $ apt-get update $ apt-get install openmediavault 注意事项 因为Debian7.6 就是在最小化安装时也安装了exim4，这个和openmediavault依赖的postfix有冲突，所以在这一步有很多提示（要根据情况选择，反正需要卸载exim4）。 在安装的过程中因为要配置postfix，所以也有很多提示，这里就不细表了，我全部选的默认值。 其他交互提示也是默认值。 大概要下载90M数据，解压后要占用300多M。","tags":[]},{"title":"构建多平台 Docker 镜像","date":"2020-05-20T12:06:00.000Z","path":"2020/05/20/13/","text":"构建多平台 Docker 镜像利用 Docker 19.03 引入的插件 buildx，可以很轻松地构建多平台 Docker 镜像。buildx 是 docker build ... 命令的下一代替代品，它利用 BuildKit 的全部功能扩展了 docker build 的功能。 下面就来演示一下如何在短短几分钟内使用 buildx 构建出不同平台的 Docker 镜像。步骤如下： 启用 buildx 插件 要想使用 buildx，首先要确保 Docker 版本不低于 19.03，同时还要通过设置环境变量 DOCKER_CLI_EXPERIMENTAL 来启用。可以通过下面的命令来为当前终端启用 buildx 插件： 🐳 → export DOCKER_CLI_EXPERIMENTAL=enabled 验证是否开启： 🐳 → sudo docker buildx version github.com/docker/buildx v0.3.1-tp-docker 6db68d029599c6710a32aa7adcba8e5a344795a7 如果在某些系统上设置环境变量 DOCKER_CLI_EXPERIMENTAL 不生效（比如 Arch Linux）,你可以选择从源代码编译： 🐳 → export DOCKER_BUILDKIT=1🐳 → docker build –platform=local -o . git://github.com/docker/buildx🐳 → mkdir -p ~/.docker/cli-plugins &amp;&amp; mv buildx ~/.docker/cli-plugins/docker-buildx 或者使用如下方式： 在宿主机目录下，打开 /root/.docker/config.json 文件，没有的话自行创建 $ sudo vi /root/.docker/config.json 写入以下数据，并保存后，重启docker 1234&#123; &quot;experimental&quot;: &quot;enabled&quot;, &quot;debug&quot;: true&#125; 启用 binfmt_misc 如果你使用的是 Docker 桌面版（MacOS 和 Windows），默认已经启用了 binfmt_misc，可以跳过这一步。 如果你使用的是 Linux，需要手动启用 binfmt_misc。大多数 Linux 发行版都很容易启用，不过还有一个更容易的办法，直接运行一个特权容器，容器里面写好了设置脚本： 🐳 → docker run –rm –privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d 建议将 Linux 内核版本升级到 4.x 以上，特别是 CentOS 用户，你可能会遇到错误。 验证是 binfmt_misc 否开启： 🐳 → ls -al /proc/sys/fs/binfmt_misc/ 12345678总用量 0总用量 0-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-aarch64-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-arm-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-ppc64le-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-s390x--w------- 1 root root 0 11月 18 00:09 register-rw-r--r-- 1 root root 0 11月 18 00:12 status 验证是否启用了相应的处理器： 🐳 → cat /proc/sys/fs/binfmt_misc/qemu-aarch64 123456enabledinterpreter /usr/bin/qemu-aarch64flags: OCFoffset 0magic 7f454c460201010000000000000000000200b7mask ffffffffffffff00fffffffffffffffffeffff 从默认的构建器切换到多平台构建器 Docker 默认会使用不支持多 CPU 架构的构建器，我们需要手动切换。 先创建一个新的构建器： 🐳 → docker buildx create –use –name mybuilder 启动构建器： 🐳 → docker buildx inspect mybuilder –bootstrap 123456789101112[+] Building 5.0s (1/1) FINISHED =&gt; [internal] booting buildkit 5.0s =&gt; =&gt; pulling image moby/buildkit:buildx-stable-1 4.4s =&gt; =&gt; creating container buildx_buildkit_mybuilder0 0.6sName: mybuilderDriver: docker-containerNodes:Name: mybuilder0Endpoint: unix:///var/run/docker.sockStatus: runningPlatforms: linux/amd64, linux/arm64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6 查看当前使用的构建器及构建器支持的 CPU 架构，可以看到支持很多 CPU 架构： 🐳 → docker buildx ls 12345NAME/NODE DRIVER/ENDPOINT STATUS PLATFORMSmybuilder * docker-container mybuilder0 unix:///var/run/docker.sock running linux/amd64, linux/arm64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6default docker default default running linux/amd64, linux/386 12345678910111213141516171819202122232425262728293031323334353637383940414243444546475. 构建多平台镜像 现在我们就可以构建支持多 CPU 架构的镜像了！ 假设现在就可以使用 buildx 构建一个支持 arm、arm64 和 amd64 多架构的 Docker 镜像了，同时将其推送到 [Docker Hub](https://hub.docker.com/)： &gt; 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/arm,linux/arm64,linux/amd64 . --push 需要提前通过 `docker login` 命令登录认证 Docker Hub。 现在就可以通过 `docker pull mirailabs/hello-arch` 拉取刚刚创建的镜像了，Docker 将会根据你的 CPU 架构拉取匹配的镜像。 背后的原理也很简单，之前已经提到过了，buildx 会通过 `QEMU` 和 `binfmt_misc` 分别为 3 个不同的 CPU 架构（arm，arm64 和 amd64）构建 3 个不同的镜像。构建完成后，就会创建一个 [manifest list](https://docs.docker.com/engine/reference/commandline/manifest/)，其中包含了指向这 3 个镜像的指针。 如果想将构建好的镜像保存在本地，可以将 `type` 指定为 `docker`，但必须分别为不同的 CPU 架构构建不同的镜像，不能合并成一个镜像，即： &gt; 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/arm -o type=docker . &gt; &gt; 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/arm64 -o type=docker . &gt; &gt; 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/amd64 -o type=docker .6. 测试多平台镜像 由于之前已经启用了 `binfmt_misc`，现在我们就可以运行任何 CPU 架构的 Docker 镜像了，因此可以在本地系统上测试之前生成的 3 个镜像是否有问题。 首先列出每个镜像的 `digests`： &gt; 🐳 → docker buildx imagetools inspect yangchuansheng/hello-arch ```bash Name: docker.io/yangchuansheng/hello-arch:latest MediaType: application/vnd.docker.distribution.manifest.list.v2+json Digest: sha256:ec55f5ece9a12db0c6c367acda8fd1214f50ee502902f97b72f7bff268ebc35a Manifests: Name: docker.io/yangchuansheng/hello-arch:latest@sha256:38e083870044cfde7f23a2eec91e307ec645282e76fd0356a29b32122b11c639 MediaType: application/vnd.docker.distribution.manifest.v2+json Platform: linux/arm/v7 Name: docker.io/yangchuansheng/hello-arch:latest@sha256:de273a2a3ce92a5dc1e6f2d796bb85a81fe1a61f82c4caaf08efed9cf05af66d MediaType: application/vnd.docker.distribution.manifest.v2+json Platform: linux/arm64 Name: docker.io/yangchuansheng/hello-arch:latest@sha256:8b735708d7d30e9cd6eb993449b1047b7229e53fbcebe940217cb36194e9e3a2 MediaType: application/vnd.docker.distribution.manifest.v2+json Platform: linux/amd64 运行每一个镜像并观察输出结果： 🐳 → docker run –rm xxx:arm 🐳 → docker run –rm xxx:amd64 🐳 → docker run –rm xxx:arm64 总结 回顾一下，本文带大家了解了在不同的 CPU 架构上运行软件的挑战性，以及 buildx 如何帮助我们解决了其中的一些挑战。使用 buildx，我们无需对 Dockerfile 进行任何修改，就可以创建支持多种 CPU 架构的 Docker 镜像，然后将其推送到 Docker Hub。任何安装了 Docker 的系统都可以拉取到与它的 CPU 架构相对应的镜像。 未来 buildx 可能会成为 docker build 命令的一部分，最终所有上面提到的功能都会变成默认的功能，下沉到基础设施中交叉编译程序的做法将会变成远古时代的愚蠢行为。","tags":[]},{"title":"Centos8安装Docker","date":"2020-05-20T10:06:00.000Z","path":"2020/05/20/12/","text":"Docker容器操作 查看容器： $ sudo docker ps -a 打开容器： sudo docker statr “CONTAINER ID” $ sudo docker start cc32bf495919 //举例：打开portainerUI 操作容器： $ sudo docker exec -it “container-name” bash // 进入容器操作界面 退出容器： 直接exit退出容器，会关闭当前容器； 通过按Ctrl+P+Q进行退出容器，此时不会关闭当前容器。 宿主机与容器间数据互传： 宿主机传给容器： $ sudo docker cp /home/gysg/developer/catalina.sh tomcat:/usr/local/tomcat/bin/ 容器传给宿主机： $ sudo docker cp tomcat:/usr/local/tomcat/bin/catalina.sh /home/gysg/developer/ 文件权限不一致造成运行问题，因此需要把权限取消或者还原 $ sudo chmod 777 -R dirs // 设置为777，任何人都可以操作 $ sudo chmod 644 -R dirs // 设置为root权限 容器运行说明： $ docker run [OPTIONS] IMAGE [COMMAND] [ARG…] 12345678910111213-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-P: 随机端口映射，容器内部端口随机映射到主机的高端口-p: 指定端口映射，格式为：主机(宿主)端口:容器端口-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；--name=&quot;nginx-lb&quot;: 为容器指定一个名称； 自动重启设置： 在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启： $ sudo docker run –restart=always 如果已经启动了则可以使用如下命令： $ sudo docker update –restart=always CentOS 8中安装Docker官方参考地址：https://docs.docker.com/install/linux/docker-ce/centos/ 里面包含包下载地址： https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ 安装依赖 $ sudo yum install -y yum-utils device-mapper-persistent-data lvm2 $ sudo yum-config-manager –add-repo https://download.docker.com/linux/centos/docker-ce.repo $ sudo yum install docker-ce docker-ce-cli containerd.io 如果报错：Problem: package docker-ce-3:19.03.4-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3 那就先装新版的 containerd.io $ sudo dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm 再装剩下两个 $ sudo yum install docker-ce docker-ce-cli $ sudo systemctl start docker $ docker –version 开机自启 $ sudo systemctl enable docker CentOS 8中安装Docker出现和Podman冲突 查看是否安装 Podman rpm -q podman 删除Podman dnf remove podman 安装 Docker dnf install docker-ce docker-ce-cli Docker下安装图形化工具docker 图形页面管理工具常用的有三种，DockerUI ，Portainer ，Shipyard 。DockerUI 是 Portainer 的前身，这三个工具通过docker api来获取管理的资源信息。平时我们常常对着shell对着这些命令行客户端，审美会很疲劳，如果有漂亮的图形化界面可以直观查看docker资源信息，也是非常方便的。今天我们就搭建单机版的三种常用图形页面管理工具。这三种图形化管理工具以Portainer最为受欢迎。 安装轻量级图形页面管理之Portainer： 查看portainer镜像 $ docker search portainer 选择喜欢的portainer风格镜像，下载 $ docker pull portainer/portainer 启动dockerui容器 $ docker run –restart=always -d –name portainerUI -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer 浏览器访问 http://192.168.2.119:9000 , 设置一个密码即可，点击创建用户 Docker下安装MySQL8 安装MySQL源 $ sudo docker pull mysql:8.0.20 // 指定版本号安装MySQL 第一次启动 $ sudo docker run -p 3306:3306 –name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.20 配置持久化数据 根目录创建目录： $ mkdir /workdir 目录迁移： $ cp /var/lib/mysql /workdir/ 配置信息修改： 打开/etc/mysql目录下的my.cnf配置文件，修改其中的 ”datadir = /workdir/mysql“，再重新存入原位置 $ sudo /home/***/my.cnf mysql:/etc/mysql 重启容器MySQL 修改加密规则 $ docker exec -it mysql bash // 进入MySQLcontainer $ mysql -uroot -p123456 // 登录MySQL $ alter user ‘root‘@’%’ identified by ‘123456’ password expire never; $ alter user ‘root‘@’%’ identified with mysql_native_password by ‘123456’; $ create user ‘xxh‘@’%’ identified with mysql_native_password by ‘xxh123!@#’; $ GRANT ALL PRIVILEGES ON . TO ‘xxh‘@’%’; $ flush privileges; // 使设置立即生效 镜像拉取问题 默认会拉取最新版本的镜像，然而却总是卡在某段动也不能动…… 解决方案先修改宿主机下的 /etc/docker/的daemon.json文件，此处网上有多种修改方案我也试过几种…最后用的是下面这个： 123&#123; &quot;registry-mirrors&quot;: [&quot;https://9cpn8tt6.mirror.aliyuncs.com&quot;]&#125; dockerfile配置 1234567container_name: &apos;local_db&apos;build: ./services/mysqlenvironment: MYSQL_ROOT_PASSWORD: $&#123;MYSQL_ROOT_PASSWORD&#125;ports: - &quot;3306:3306&quot;volumes: - $&#123;MYSQL_DATA_PATH&#125;:/var/lib/mysql 数据持久化（不推荐） 12341. 需要在修改mysql容器中的根目录下，新建目录 mdkir /workdir 。2. 将 /var/lib/mysql 复制 到新建目录中。3. 修改 /etc/mysql/my.cnf datadir = /workdir/mysql Docker下安装Tomcat 安装Tomcat $ sudo docker pull tomcat:latest 设置Tomcat时区一致 在tomcat/bin下的catalina.sh最后加上下面这一句即可： JAVA_OPTS=”${JAVA_OPTS} -Duser.timezone=GMT+08” 启动Tomcat $ sudo docker run -p 8090:8080 –name tomcat -d tomcat:latest 或者如下： $ sudo docker run –name tomcat -d -p 8090:8080 -v /home/gysg/developer/websoft:/usr/local/tomcat/webapps -v /mnt/data:/mnt/data tomcat-gysg:2.0 给运行中Docker容器安装SSH服务这里我以我本地一个运行中的SQL Server的数据库服务为例 1、打开命令面板，输入指令docker ps查看运行中的容器并复制容器ID 2、输入指令docker exec -it &lt;复制的容器ID&gt; /bin/sh,进入命令行工具 3、进入命令行工具后首先建议输入指令apt-get update更新下源 4、输入指令apt-get install openssh-server,安装SSH服务 5、安装完毕后，输入指令service ssh satrt 启动SSH服务 6、使用vim进入/etc/ssh/sshd.config文件更改SSH服务配置，将PermitRootLogin的值从withoutPassword改为yes，允许root用户进行登录 7、输入指令passwd root设置root用户登录密码 8、如果docker容器中没有安装vim,则输入指令apt-get install vim进行安装 9、输入指令service ssh restart重启SSH服务 10、输入exit退出当前容器命令行工具 11、回到系统命令面板，输入指令docker ps查看当前运行中的容器并复制安装好SSH服务的容器ID 12、为了避免后期因为各种原因重复安装SSH服务，建议输入指令docker commit &lt;复制的容器ID&gt; &lt;自己定义的镜像名&gt;，保存经想到本地 13、停止当前镜像，输入指令docker run -e &apos;ACCEPT_EULA=Y&apos; -e &apos;SA_PASSWORD=567rty%^&amp;YUI&apos; -p 1433:1433 -p 8400:20 -d microsoft/mssql-server-linux:latest,启动刚才保存在本地的镜像并把SSH服务的20端口映射出来，这里我映射的是主机8400duankou 14、为了方便，这里还可以输入指令docker update --restart=always &lt;容器ID&gt;让容器保持始终运行。 Docker下DNS解析出错的处理Temporary failure in name resolution（域名解析暂时失败） ​ 我的操作环境为CentOS 8，与CentOS 7使用命令完全一致。其他不同Linux系统版本命令可能会有所不同，请根据自己的系统版本使用对应命令，直接百度相关操作即可。 检查主机网络设置 查看系统是否打开ip地址转发功能： $ cat /proc/sys/net/ipv4/ip_forward // 返回0则说明未打开，开启ip地址转发 使用命令打开配置文件： $ vi /etc/sysctl.conf 打开内核配置文件，查找net.ipv4.ip_forward = 0，将其修改为net.ipv4.ip_forward = 1，若该行开头有#，将其去掉；若配置文件中没有此项，则在文件最后添加此内容。 保存修改后，重启系统或输入以下命令使修改生效： $ sysctl -p /etc/sysctl.conf$ systemctl restart network 检查一下问题是否解决，若没有则进入下一步排查。 检查主机防火墙配置 查看防火墙状态（若防火墙为关闭状态，可跳过防火墙有关设置）： $ sudo firewall-cmd –state 若返回runging，则防火墙为开启状态，查看防火墙是否开启ip地址转发（ip地址伪装）： $ sudo firewall-cmd –query-masquerade 若返回no，则输入以下命令开启ip地址转发： $ sudo firewall-cmd –add-masquerade –permanent 然后输入以下命令使修改生效： $ sudo firewall-cmd –reload 再次检查问题是否已经解决，若没有则进行再一步排查。 设置Docker指定DNS服务器 打开Docker相关设置文件（宿主机内），没有就新建一个，输入下列命令会打开或自动新建： $ vi /etc/docker/daemon.json 在文件中输入以下内容： { &quot;dns&quot;: [&quot;8.8.8.8&quot;,&quot;114.114.114.114&quot;] } 8.8.8.8和114.114.114.114是两个DNS服务器，可以修改或增加。 然后重启Docker： $ systemctl restart docker 到这里问题应该就可以得到解决了。 修改容器配置文件，重启docker服务 容器的配置文件路径 /var/lib/docker/containers/[hash_of_the_container]/hostconfig.json` 其中的hashofthecontainer是docker镜像的hash值，可以通过docker ps或者docker inspect containername查看。（CONTAINER ID就可以看出来） 按需修改端口, 按需修改挂载目录(权限和属主属组要相同)，然后重启docker服务 格式： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&#123; \"Binds\": [\"/srv/gitlab/logs:/var/log/gitlab\", \"/srv/gitlab/data:/var/opt/gitlab\", \"/srv/gitlab/config:/etc/gitlab\"], \"ContainerIDFile\":\"\", \"LogConfig\": &#123;\"Type\":\"journald\",\"Config\":&#123;&#125;&#125;, \"NetworkMode\":\"default\", \"PortBindings\": &#123;\"22/tcp\":[&#123;\"HostIp\":\"\",\"HostPort\":\"10022\"&#125;], \"443/tcp\":[&#123;\"HostIp\":\"\",\"HostPort\":\"10443\"&#125;], \"80/tcp\":[&#123;\"HostIp\":\"\",\"HostPort\":\"10080\"&#125;]&#125;, \"RestartPolicy\": &#123;\"Name\":\"always\",\"MaximumRetryCount\":0&#125;, \"AutoRemove\":false, \"VolumeDriver\":\"\", \"VolumesFrom\":null, \"CapAdd\":null, \"CapDrop\":null, \"Dns\":[], \"DnsOptions\":[], \"DnsSearch\":[], \"ExtraHosts\":null, \"GroupAdd\":null, \"IpcMode\":\"\", \"Cgroup\":\"\", \"Links\":[], \"OomScoreAdj\":0, \"PidMode\":\"\", \"Privileged\":false, \"PublishAllPorts\":false, \"ReadonlyRootfs\":false, \"SecurityOpt\":null, \"UTSMode\":\"\", \"UsernsMode\":\"\", \"ShmSize\":67108864, \"Runtime\":\"docker-runc\", \"ConsoleSize\":[0,0], \"Isolation\":\"\", \"CpuShares\":0, \"Memory\":0, \"NanoCpus\":0, \"CgroupParent\":\"\", \"BlkioWeight\":0, \"BlkioWeightDevice\":null, \"BlkioDeviceReadBps\":null, \"BlkioDeviceWriteBps\":null, \"BlkioDeviceReadIOps\":null, \"BlkioDeviceWriteIOps\":null, \"CpuPeriod\":0, \"CpuQuota\":0, \"CpuRealtimePeriod\":0, \"CpuRealtimeRuntime\":0, \"CpusetCpus\":\"\", \"CpusetMems\":\"\", \"Devices\":[], \"DiskQuota\":0, \"KernelMemory\":0, \"MemoryReservation\":0, \"MemorySwap\":0, \"MemorySwappiness\":-1, \"OomKillDisable\":false, \"PidsLimit\":0, \"Ulimits\":null, \"CpuCount\":0, \"CpuPercent\":0, \"IOMaximumIOps\":0, \"IOMaximumBandwidth\":0&#125; Tomcat配置 [“/home/gysg/developer/websoft:/usr/local/tomcat/webapps”, “/mnt/data:/mnt/data”] sudo docker run --name tomcat-new-01 -d -p 8090:8080 -v /home/gysg/developer/websoft:/usr/local/tomcat/webapps -v /mnt/data:/mnt/data tomcat-new-01:latest Docker的备份与还原 备份容器 $ docker ps // 查看已创建的容器 $ docker commit -p “CONTAINER ID” container-name // 提交生成镜像快照 镜像打包 提交镜像到docker hub ​ 如果我们想要在Docker注册中心上传或备份镜像，我们只需要运行 docker login 命令来登录进Docker注册中心，然后推送所需的镜像即可。 代码如下： $ docker login // username: password: $ docker tag “IMAGE ID” “filepath/image-name:tag” // 打标记 $ docker push “filepath/image-name” // 提交 保存镜像到本地文件 $ docker save -o ~/container-backup.tar container-backup // 备份路径.tar 要备份的镜像名称 恢复备份 远程恢复 $ docker pull “filepath/image-name:tag” 本地恢复 $ docker load -i ~/container-backup.tar // 备份路径.tar 加载新容器 docker run … 重启docker $ sudo systemctl restart docker Docker报错日常docker: Error response from daemon:解决方法： 停止所有的容器，有时候也不需要全部停止 1docker stop $(docker ps -q) 强制移除此容器 1docker rm -f mysql1 清理此容器的网络占用 格式：docker network disconnect --force 网络模式 容器名称 示例：docker network disconnect --force bridge mysql1 简查是否还有同名容器占用 格式：docker network inspect 网络模式 示例：docker network inspect bridge 重新构建容器 1docker run --name mysql1 -d -p3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:latest Tomcat启动运行缓慢处理 直接改jdk的配置 打开jdk安装路径 $JAVA_PATH/jre/lib/security/java.security 这个文件，找到下面的内容: securerandom.source=file:/dev/random 替换成： securerandom.source=file:/dev/./urandom 或者在启动时加上如下参数： $ -e JAVA_OPTS=”-Duser.timezone=Asia/Shanghai -Djava.security.egd=file:/dev/./urandom” 或者修改catlina.sh，在第一行加入以下代码： 1234&gt; if [[ &quot;$JAVA_OPTS&quot; != *-Djava.security.egd=* ]]; then&gt; JAVA_OPTS=&quot;$JAVA_OPTS -Djava.security.egd=&quot;&gt; fi&gt; Docker镜像无法删除的问题 $ sudo docker image ls $ sudo docker rm -f tomcat:latest Docker下执行构建命令 $ sudo docker build -t image-name:tag . Docker下创建kms服务器 启动KMS服务器： $ sudo docker run -idt -p 1688:1688 –name kms-server vlmcsd 启动Tomcat服务器： $ sudo docker run –name tomcat -dit -p 8090:8080 -v /etc/localtime:/etc/localtime:ro -v /home/gysg/developer/websoft:/usr/local/soft/tomcat/webapps -v /mnt/data:/mnt/data tomcat-gysg:2.0 $ sudo docker run –name tomcat -dit -p 8080:8080 -v /etc/localtime:/etc/localtime:ro -v /home/pi/developer/websoft:/usr/local/soft/tomcat/webapps -v /mnt/data:/mnt/data -v /mnt/usb/movie:/mnt/usb/movie tomcat-gysg:9.1.arm 启动MySQL数据库： $ sudo docker run -p 3306:3306 –name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.20 启动图形化管理界面： $ docker run –restart=always -d –name portainerUI -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer Nginx启动： 1234567891011&gt; docker run --detach \\&gt; --name nginx \\&gt; -p 443:443\\&gt; -p 80:80 \\&gt; -v /nginx/data:/usr/share/nginx/html:rw\\&gt; -v /nginx/config/nginx.conf:/etc/nginx/nginx.conf/:rw\\&gt; -v /nginx/config/conf.d/default.conf:/etc/nginx/conf.d/default.conf:rw\\&gt; -v /nginx/logs:/var/log/nginx/:rw\\&gt; -v /nginx/ssl:/ssl/:rw\\&gt; -d nginx&gt; Jenkins启动： 创建一个jenkins目录 $ mkdir /home/jenkins_home; 启动一个jenkins容器 $ sudo docker run -d –name jenkins -p 9100:8080 -p 50000:50000 -v /home/gysg/developer/jenkins:/var/jenkins_home -v /home/gysg/developer/android-sdk:/var/android-sdk jenkins/jenkins:lts","tags":[]},{"title":"树莓派系统的备份与还原","date":"2018-10-26T10:06:00.000Z","path":"2018/10/26/11/","text":"树莓派系统的备份与还原树莓派使用SD卡来安装系统，如果SD卡丢失或者损坏，那么树莓派上的数据都会丢失，所以一定要备份好SD卡。这篇文章可以帮你备份你的树莓派系统。主要内容为备份SD卡，制作树莓派系统镜像以及在需要的时候还原备份的方法。 一、准备工作1、一台linux PC 2、树莓派SD卡 3、读卡器 二、备份树莓派方法一： 如果你没有运行Linux 的电脑，通过windows也可以备份，只不过这种方法备份下来的文件比较大，SD卡容量多大，则备份文件多大。 首先将SD卡通过读卡器插入电脑，打开 win32diskimager ，输入镜像名 raspberry.img ，点击读，即可将树莓派SD卡文件转为镜像。 这种方法制作的镜像文件巨大，而且在还原的时候必须使用比镜像更大容量的SD卡，造成种种不方便。这种情况下我们可以选择方法二。 方法二： 挂载SD卡 如果在Ubuntu环境下，SD卡会自动进行挂载，我们可以直接进行第2步。 自动挂载的情况下，使用 df -h 命令可以查看SD卡，如/dev/sdb1 /dev/sdb2 就是树莓派的SD卡，其中60M的分区sdb1是boot分区，15G的分区sdb2是树莓派的系统文件分区。 如果使用Centos或者其他linux操作系统，未自动挂载SD卡，我们则需要手动进行挂载。 使用以下命令进行挂载： $ cd /media $ sudo mkdir sdc1 sdc2 $ sudo mount /dev/sdc1 /media/sdc1 $ sudo mount /dev/sdc2 /media/sdc2 挂载完成后如下图中所示。 备份SD卡 使用 dd 命令可以直接备份SD卡。比如树莓派的SD卡的路径是 /dev/sdc1 和 /dev/sdc2 ，所以备份整个SD卡的路径就是 /dev/sdc。 输入备份命令： $ sudo dd if=/dev/sdc | gzip&gt;/home/lixinxing/raspberry.gz 其中备份文件要保存的位置、文件名和 SD卡的路径要根据实际选择。 这个命令可以在备份的同时压缩镜像大小，压缩完成后镜像有6.7G. 三、将树莓派镜像还原备份完成后，如果需要还原树莓派，我们可以通过以下方法进行。 方法一： 在windows环境下，将备份文件解压，然后使用 win32diskimager 将备份文件写入到新的SD卡。 方法二： 在linux环境下，使用以下步骤将备份文件写入到SD卡。 1. 删除SD卡分区。 使用 fdisk 命令对SD卡格式化 2. 写入备份文件 $ sudo gzip -dc /home/lixinxing/raspberry.gz | sudo dd of=/dev/sdc 其中备份文件的位置、文件名和 SD卡的路径要根据实际选择。 这样就将备份还原到树莓派了，可以将SD卡插入树莓派启动！ 转载原帖：制作树苺派SD卡备份镜像——树苺派系统备份与还原指南","tags":[]},{"title":"Linux下使用Vi时方向键变乱码、删除键不能使用的解决方法","date":"2018-10-23T16:33:00.000Z","path":"2018/10/23/10/","text":"Linux下使用Vi时方向键变乱码、删除键不能使用在Linux下编辑一些文件，这就涉及到了Vi这个编辑器。在Linux下，初始使用Vi的时候有两个典型的问题： 在编辑模式下使用方向键的时候，并不会使光标移动，而是在命令行中出现A、B、C、D四个字母； 当编辑出现错误，想要删除时，发现Backspace键不起作用，只能用Delete键来删除； 这两个问题对于新手来说是很讨厌的，下面我就给大家说一种从网上得来而我又切身有效的方法。 编辑/etc/vim/vimrc.tiny 由于/etc/vim/vimrc.tiny的拥有者是root用户，所以要在root的权限下对这个文件进行修改。 方法很简单：可以输入命令“su”，然后键入密码获得root权限，然后对文件进行修改；或者输入命令“sudo vi/etc/vim/vimrc.tiny”，输入密码后直接对文件进行编辑。 修改： 至于编辑的内容也是超级简单： vimrc.tiny文件中的倒数第二句话是“set compatible” 将“compatible”改为“nocompatible”， 这样非兼容模式就可以解决方向键变ABCD的问题了。 那么接下来要解决Backspace键的问题也非常简单 就在刚才那句话的后面加一句： set backspace=2 变成如下所示 set nocompatible set backspace=2 操作完成后，保存并退出就可以了。 转载原贴：Linux下使用Vi时方向键变乱码、删除键不能使用的解决方法","tags":[]},{"title":"树莓派服务器配置","date":"2018-10-23T09:30:00.000Z","path":"2018/10/23/9/","text":"树莓派系统安装现在越来越多的人在使用树莓派，而拿到手的第一步就是为自己的树莓派安装一个自己想要的系统，现在我将详细的讲述树莓派安装系统的步骤 下载你所要安装的树莓派系统； 解压并提取出其中的img格式的镜像文件； 格式化SD卡，使用“win32diskimager”软件，进行镜像烧录； 将烧录好的SD卡插入树莓派，上电后即可自动启动运行。 下面分情况讨论树莓派安装不同系统时需要注意的事项： 一、官方系统 Raspbian：系统烧录完成后直接运行即可。 桌面版系统可以连接显示器进行操作，和Ubuntu桌面版类似。 轻量版系统没有桌面，可以显示屏操作也可以直接SSH操作，看个人爱好和硬件状况。 如果有HDMI连接线和屏幕，启动完成后，先开启SSH服务。(默认SSH是禁用的) $ /etc/init.d/sshd start 或者是 /etc/init.d/ssh start $ netstat -antulp | grep ssh ##查看SSH是否运行 设置SSH开机自动启动 $ vi /etc/rc.local ## vi打开文件并加入下面指令后，保存。(注：上下文ssh或sshd是统一的) $ service sshd start 或 /etc/init.d/sshd start 没有HDMI且没有网线连接时，可以手动添加WiFi配置文件 将刷好 Raspbian 系统的 SD 卡用电脑读取。在 boot 分区，也就是树莓派的 /boot 目录下新建 wpa_supplicant.conf 文件 按照下面的参考格式填入内容并保存 wpa_supplicant.conf 文件。 ## 开始 -- ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=CN network={ ssid=&quot;WiFi A name&quot; psk=&quot;password&quot; priority=2 ## 连接优先级，数字越大优先级越高 } network={ ssid=&quot;WiFi B name&quot; psk=&quot;password&quot; scan_ssid=1 ## 设置为WiFi在隐藏模式时依然可以连接 priority=1 ## 连接优先级 } -- 结束 ## WiFi加密模式 key_mgmt=NONE ##无密码连接 或 WEP加密 key_mgmt=WPA-PSK ##使用WPA/WPA2加密 二、CentOS系统 armv7hl版没办法，只能连接显示器进行操作 扫描：nmcli d wifi 链接：nmcli d wifi connect fenggese password &apos;meiyoumima&apos; 删除：nmcli c del UUID号码 连接历史UUID：nmcli c 三、Ubuntu系统目前Ubuntu官网上暂时没有3B+的系统，只能修改启动文件进行加载安装。但是本人测试时一直卡在 network service进程下，无法进入系统。就算可以进入系统，本地网卡和无线网卡也无法工作，只能单机。 树莓派服务器组件安装一、JDK安装JDK安装方式与Ubuntu桌面版类似，下载、解压、配置环境变量，操作方式通用。 JDK必须选择“linux-arm32-vfp-hflt”版本。 二、Tomcat安装Tomcat服务器可以直接拷贝通用版的文件，然后注意使用“**.sh”脚本进行开启和关闭。 常见问题和错误 提示需要安装“JAVA_HOME”环境 如果JDK没有配置，则需要配置JDK并设置环境变量，切记设置好以后，刷新当前环境变量。 如果JDK已配置，使用 “sudo ./startup.sh” 方式开启会引起此问题。建议使用非root用户进行操作。 非root用户操作时，如果提示“权限不够”或者“not found”的情况，可以给Tomcat服务器整个文件赋予“777”权限 $ chomd -R 777 apache-tomcat-***(Tomcat文件夹名称) 启动报错：java.net.BindException: Permission denied :80 在某些系统下只有root用户才可以访问1024以下的端口号，其余用户不能访问。因此会报错。 解决方法： Tomcat服务器设置1024以上的端口号，可以正常使用。 使用以下指令对端口进行重映射： $ iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 执行service iptables save;将修改的iptables信息保存起来，restart会生效，并且加入chkconfig重启生效： $ service iptables save; $ chkconfig --level 2345 iptables on; $ chkconfig --add iptables; 实时查看Tomcat的logs信息 进入Tomcat安装目录，找到logs文件夹，执行以下命令，就会实时显示logs信息： $ tail -f catalina.out 关闭logs信息，只需 Ctrl + C 退出即可。 三、MariaDB安装由于目前centos系统默认的数据库源是MariaDB，并且MariaDB数据库与MySQL数据库完全兼容，大有替代MySQL的意思。而且树莓派下安装MySQL异常的麻烦(yum源没有，编译卡在78%死活不通过)。因此，安装MariaDB来替代MySQL。 安装MariaDB $ yum -y install mariadb mariadb-server 安装完成MariaDB，首先启动MariaDB $ systemctl start mariadb 设置开机启动 $ systemctl enable mariadb 接下来进行MariaDB的相关简单配置 键入命令： $ mysql_secure_installation 首先是设置密码，会提示先输入密码 Enter current password for root (enter for none):&lt;–初次运行直接回车 设置密码 Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车 New password: &lt;– 设置root用户的密码 Re-enter new password: &lt;– 再输入一次你设置的密码 其他配置 Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车 Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车, Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车 Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车 配置MariaDB的字符集 文件/etc/my.cnf vi /etc/my.cnf 在[mysqld]标签下添加 init_connect=&apos;SET collation_connection = utf8_unicode_ci&apos; init_connect=&apos;SET NAMES utf8&apos; character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake 文件/etc/my.cnf.d/client.cnf vi /etc/my.cnf.d/client.cnf 在[client]中添加 default-character-set=utf8 文件/etc/my.cnf.d/mysql-clients.cnf vi /etc/my.cnf.d/mysql-clients.cnf 在[mysql]中添加 default-character-set=utf8 全部配置完成，重启mariadb systemctl restart mariadb 之后进入MariaDB查看字符集 MariaDB [(none)]&gt; show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;; 其他操作以及连接均与MySQL数据库一致。","tags":[]},{"title":"Windows下MySQL解压版安装","date":"2018-06-16T08:28:58.000Z","path":"2018/06/16/8/","text":"Windows下MySQL解压版安装：1. 安装目录下创建my.ini配置文件：#代码开始 [Client] #设置3306端口 port = 3306 [mysqld] #设置3306端口 port = 3306 # 设置mysql的安装目录 basedir=E:\\mysql-5.7.19-winx64\\mysql-5.7.19-winx64 # 设置mysql数据库的数据的存放目录 datadir=E:\\mysql-5.7.19-winx64\\mysql-5.7.19-winx64\\data # 允许最大连接数 max_connections=1000 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES #skip-grant-tables #如果想默认使用“mysql_native_password”插件认证，可以在配置文件中配置default_authentication_plugin项。 [mysqld] default_authentication_plugin=mysql_native_password [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8 #代码结束 2. 生成data文件夹：有密码： mysqld --initialize --user=mysql --console 6m&gt;m0M#*.e_S 无密码： mysqld --initialize-insecure 3. 安装服务：mysqld -install 4. 设置、修改密码：alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;youpassword&apos;; # 如果Navicat、jdbc连接报错，使用如下方式处理： alter user &apos;root&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;youpassword&apos;; 5. MySQL用户管理： 管理员root的host是localhost，代表仅限localhost登录访问。 如果要允许开放其他ip登录，则需要添加新的host。 如果要允许所有ip访问，可以直接修改成“%” # 创建用户： create user &apos;xxh&apos;@&apos;%&apos; identified with mysql_native_password by &apos;xxh123!@#&apos;; # 检查用户 (需要注意：mysql8.0加密方式修改了) select user, host, plugin, authentication_string from user; # 授权所有权限 授权远程数据库 GRANT ALL PRIVILEGES ON *.* TO &apos;xxh&apos;@&apos;%&apos;； # 授权基本的查询修改权限，按需求设置 GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* TO &apos;xxh&apos;@&apos;%&apos;; # 查看用户权限 show grants for &apos;xxh&apos;@&apos;%&apos;; 6. Navicat连接数据库MySQL报错2059 解释原因：据说，mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password。 解决问题方法有两种：一种是升级navicat驱动，一种是把mysql用户登录密码加密规则还原成mysql_native_password。 第二种方式 命令行进入MySQL数据库，输入以下指令，逐行输入，每行后加一个回车 ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos; PASSWORD EXPIRE NEVER; #修改加密规则 ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;; #更新一下用户的密码 FLUSH PRIVILEGES; #刷新权限 然后按理说应该是可以了，祝君好运。 7. 卸载mysql 卸载服务： mysqld remove 在注册表里清除你的MYSQL服务： 点击开始→运行→输入regedit，然后有几个地方: 1. HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Eventlog\\Application\\MySQL 目录删除 2. HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\Services\\Eventlog\\Application\\MySQL 目录删除 3. HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application\\MySQL 目录删除","tags":[]},{"title":"CentOS 7 下配置IP、SSH、MySQL","date":"2018-03-19T11:40:00.000Z","path":"2018/03/19/7/","text":"CentOS 7CentOS 7 是目前国内主流的云服务器操作系统，也是应用最广泛的生产环境。本文简单介绍centos7的初始化使用和简单配置。 本文中CentOS 7系统安装在虚拟机中，关于安装方法和步骤不再赘述。不懂的可以自己查找资料，本文不是重点。 CentOS 7 配置IP地址CentOS 7 安装完成后，默认没有开启网络服务，需要手动进行配置。 进入网络配置文件目录 $ cd /etc/sysconfig/network-scripts/ 打开并编辑配置文件 $ ls //查看目录下的配置文件 $ vi ifcfg-ens33 //打开以ifcfg-en开头的配置文件 进行如下配置： HWADDR=00:0C:29:8D:24:73 #要保持与ifconfig命令下查看的mac地址一致 TYPE=Ethernet BOOTPROTO=static #启用静态IP地址，动态为dhcp DEFROUTE=yes PEERDNS=yes PEERROUTES=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_PEERDNS=yes IPV6_PEERROUTES=yes IPV6_FAILURE_FATAL=no NAME=eno16777736 #网卡名称 UUID=ae0965e7-22b9-45aa-8ec9-3f0a20a85d11 ONBOOT=yes #开启自动启用网络连接 IPADDR0=192.168.0.220 #设置IP地址 PREFIXO0=255.255.255.0 #设置子网掩码 GATEWAY0=192.168.0.1 #设置网关 DNS1=8.8.8.8 #设置主DNS DNS2=8.8.4.4 #设置备DNS 保存退出后，重启网络服务 $ :wq! #退出并保存 vi 编辑器使用方法： 启用编辑，按下 insert 键 退出编辑状态，跳到命令模式，按下 Esc 键 命令提示： :w 保存文件但不退出vi :w file 将修改另外保存到file中，不退出vi :w! 强制保存，不推出vi :wq 保存文件并退出vi :wq! 强制保存文件，并退出vi :q 不保存文件，退出vi :q! 不保存文件，强制退出vi :e! 放弃所有修改，从上次保存文件开始再编辑 重启服务后，如果出现以下错误，一般是配置文件的编写出现问题，仔细查实，确保大小写正确和mac地址一致。 Restarting network (via systemctl): Job for network.service failed. See &apos;systemctl status network.service&apos; and &apos;journalctl -xn&apos; for details. 还可以使用如下命令，查看网卡相关的详细日志 $ cat /var/log/messages | grep network CentOS 7 修改主机名 $ vi /etc/hostname 打开后，将localhost.localdomain 修改为你要修改的名称 $ vi /etc/hosts 127.0.0.1 localhost xxx #修改xxx为你要修改的名称 $ :wq! #保存并退出 $ shutdown -r now #立即重启系统 CentOS 7 安装openssh服务 查看是否安装了相关软件： $ rpm -qa|grep -E “openssh” 显示结果含有以下三个软件，则表示已经安装，否则需要安装缺失的软件 openssh-ldap-6.6.1p1-35.el7_3.x86_64 openssh-clients-6.6.1p1-35.el7_3.x86_64 openssh-6.6.1p1-35.el7_3.x86_64 openssh-askpass-6.6.1p1-35.el7_3.x86_64 openssh-server-6.6.1p1-35.el7_3.x86_64 openssh-keycat-6.6.1p1-35.el7_3.x86_64 openssh-server-sysvinit-6.6.1p1-35.el7_3.x86_64 安装openssh-server： $ sudo yum install openssh* 注册使用服务： $ sudo systemctl enable sshd $ sudo systemctl start sshd or: $ sudo service sshd start 打开防火墙的22端口 $ sudo firewall-cmd --zone=public --add-port=22/tcp --permanent $ sudo service firewalld restart $ systemctl restart firewalld.service 注：禁止firewall开机启动为：systemctl disable firewalld.service CentOS 7 安装 MySQL因为CentOS 7 的yum中没有MySQL的源，被mariaDB代替了。因此我们需要下载mysql的repo源，可以去MySQL官网找最新的repo源地址 点击此处查找最新的MySQL的repo源地址 首先，使用wget下载repo源。如果没有wget，安装即可 $ yum install wget #安装wget，如果已安装，可忽略 $ wget https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm #安装MySQL RPM包 $ yum install mysql-community-server #安装MySQL 安装成功后，重启MySQL服务 $ service mysqld restart #如果不行，运行下面的指令 $ systemctl restart mysqld.service 刚开始安装的Mysql5.7是会随机生成一个root密码的，要先找到这个随机密码，然后改新密码。 通过grep命令查找随机root密码 $ grep “password” /var/log/mysqld.log 根据返回结果 2018-03-19T07:38:12.945057Z 1 [Note] A temporary password is generated for root@localhost: dlA42dmP;+QJ root@localhost: 之后的无规则字符串即为生成的随机密码。 同样，可以去 /var/log 目录下，打开 mysqld.log 文件来查看密码。 临时密码登录后，需要修改root密码才能进行其他操作： $ SET password=PASSWORD(“Mysql123”); $ ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘Mysql123’; 以上两种密码修改方式均可使用，但是要注意密码规则限制，否则会报错： ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 密码修改成功后，可以查看和修改密码策略 查看当前密码策略 $ show variables like ‘%password%’; 修改策略（在配置文件中增加以下语句） $ vi /etc/my.conf 添加如下条件： validate_password = off 说明：off 是 关闭； 0 是 LOW； 1 是 MEDIUM； 2 是 STRONG 另外，MySQL官网密码策略详细说明，可点击此处进行查看 修改完密码规则后(可改可不改，根据项目对安全的需求而定)，添加一个可以远程访问的用户： $ mysql&gt;grant all on *.* to username@&apos;%&apos; identified by &apos;password&apos;; 最后不要忘记添加防火墙的3306端口，用于打开数据库的远程访问： $ firewall-cmd --zone=public --add-port=3306/tcp --permanet $ systemctl restart firewalld.service #重启防火墙使设置生效 余下步骤可参考另一篇文章，点击此处跳转","tags":[]},{"title":"Ubuntu下配置SSH登录","date":"2018-03-16T14:55:56.000Z","path":"2018/03/16/6/","text":"Ubuntu下配置SSH登录使用远程服务器的时候，一个好的远程连接工具是十分必要的。xshell就是不错的远程ssh工具。因此，我们有必要配置远程Linux服务器的ssh远程连接服务。 安装SHH服务Ubuntu下默认安装了ssh客户端 openssh-client，远程服务器非必须安装，了解一下即可。 $ sudo apt-get install openssh-client 重点是要安装ssh服务端 openssh-server $ sudo apt-get install openssh-server 安装成功后，ssh服务默认启动，此时可以使用远程Linux主机的用户名和密码进行远程登录了。 设置使用SSH key登录首先需要生成ssh密钥对： $ ssh-keygen -t rsa -P “” 生成过程中，可以输入密码，也可以直接回车，密码置空，看个人对安全工作的需求程度而定。 在 /home/user/.ssh 目录下，将生成的公钥追加到 authorized_keys 文件中 $ cd /home/user/ $ cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys 注意：此处写入的是生成的公钥文件，而非私钥！ 如果 .ssh文件夹下没有 authorized_keys 文件也无所谓，执行上述代码之后，会自动生成。 给 authorized_keys 文件设置权限： $ chmod 600 .ssh/authorized_keys 然后就可以通过ssh工具，输入用户名并且加载生成的私钥进行登录远程服务器了。 设置SSH只允许远程SSH key连接有时候为了保证远程连接的安全性，服务器会设置取消用户名+密码连接的组合。 在 /etc/ssh 目录下，设置方式为： $ cd /etc/ssh $ sudo gedit sshd_conf 找到文本中的 PasswordAuthentication yes 字段，将 yes 改成 no ，保存后，重启ssh服务即可立即生效。 $ service ssh restart 这样就实现了最大化安全性能的ssh远程连接服务。 配置好了之后，就可以愉快的使用xshell在Windows系统下自由的管理远程Linux主机了。 Linux系统下文件(夹)权限问题在使用xshell进行文件上传和下载时，可能会出现“permission is not allowed”的情况，这是由于Linux下，文件(夹)的用户权限控制导致的。出现此问题时，一般有以下两种解决方法： 可以选择使用 root 权限用户登录操作文件(夹)； 使用chmod修改文件(夹)权限： $ chmod 777 “要修改的文件(夹)” # 777表示任意用户均可访问 $ chmod -R 777 “要修改的文件夹” #递归设置文件夹下所有文件的权限 注意：本文中 /home/user/ 中，user文件夹代指的是当前Linux登录用户的用户文件夹，而非为 user 名称的文件夹。","tags":[]},{"title":"Ubuntu下安装jdk并配置环境变量","date":"2018-03-16T11:06:56.000Z","path":"2018/03/16/4/","text":"Ubuntu下安装jdk并配置环境变量每次重新安装Ubuntu时都要重新安装jdk和配置环境，因此在此专门记录一下，以方便日后查看。 本文只讲述使用官网安装包 jdk-xxx.tar.gz 来安装和配置环境的方法。使用yum或apt安装方法不在此列。 开始安装： 官网下载jdk文件 jdk-8u161-linux-x64.tar.gz（可能也有新版本发布，操作相同） 创建新目录，作为jdk的安装目录 $ sudo mkdir /developer 移动并解压文件到此处 $ sudo mv jdk-8u161-linux-x64.tar.gz /home/user/developer $ sudo tar -zxvf jdk-8u161-linux-x64.tar.gz 安装完成。是不是感觉特别简单？别急还得配置环境变量。。。 配置环境变量： 配置 etc/environment 下的环境变量 $ sudo gedit /etc/environment 打开编辑器后，加入以下配置： PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$JAVA_HOME/bin&quot; export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib export JAVA_HOME=/home/user/developer/jdk1.8.0_161 修改完成之后保存关闭，并输入以下命令使环境变量立即生效 $ source /etc/environment 配置 etc/profile 下的全局环境变量 $ sudo gedit /etc/profile 打开后，在末尾添加如下内容： #set Java environment export JAVA_HOME=/home/user/developer/jdk1.8.0_161 export JRE_HOME=$JAVA_HOME/jre export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 修改完成之后保存关闭，并输入以下命令使环境变量立即生效 $ source /etc/profile 检查是否配置成功： $ java -version 如显示详细版本号则证明jdk安装并配置成功。 java version &quot;1.8.0_161&quot; Java(TM) SE Runtime Environment (build 1.8.0_161-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) 一般情况下，配置这两处环境变量，即可在任意位置使用Java_home环境了。关机或重启后配置依然生效。 注意：本文中 /home/user/ 中，user文件夹代指的是当前Linux登录用户的用户文件夹，而非为 user 名称的文件夹。","tags":[]},{"title":"Ubuntu下安装MySQL和基本操作","date":"2018-03-15T14:26:06.000Z","path":"2018/03/15/5/","text":"Ubuntu下安装MySQLUbuntu上安装MySQL最简单的方法就是使用命令进行安装。 $ sudo apt-get install mysql-server $ apt-get install mysql-client $ sudo apt-get install libmysqlclient-dev 安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功： $ sudo netstat -tap | grep mysql 通过命令返回的结果，如果 mysql 的socket处于 listen 状态则表示安装成功。 登陆mysql数据库可以通过如下命令： $ mysql -u root -p -u 表示选择登陆的用户名， -p 表示登陆的用户密码，上面命令输入之后会提示输入密码，此时输入密码就可以登录到mysql。 设置MySQL远程访问远程使用数据库客户端软件连接 MYSQL数据时，有时候会出现如下错误： 2003-Can’t connect to MySQL on ‘192.168.0.100’(10061)错误 此错误类型为MySQL服务端不允许远程访问导致，此时需配置开启MySQL的远程访问。 设置mysql允许远程访问，首先要找到MySQL的配置文件，一般位置在如下目录 /etc/mysql/mysql.conf.d/mysqld.cnf 打开方式： $ sudo gedit /etc/mysql/mysql.conf.d/mysqld.cnf // 或者使用如下方式打开配置文件 $ sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf 然后找到这一行代码 bind-address = 127.0.0.1 方法一：前面添加&quot;#&quot;直接注释掉 bind-address = 0.0.0.0 方法二：将 127.0.0.1 改成 0.0.0.0 顺便修改MySQL最大允许读取数据量，以防止业务过程中报错错： 错误类型：Packet for query is too large(xxx &gt; 1024) 修改方式：[mysqld] 下 max_allowed_packet = 16M (设置20M左右为宜) 修改完成后，需要重启MySQL服务器才能生效 $ service mysql restart // Ubuntu 系统下 $ systemctl restart mysqld.service // centos 7 系统下 MySQL用户的添加、修改、删除和授权用户添加：create user 用户名 identified by &apos;密码&apos;; 例：create user haha identified by &apos;123456&apos;; 权限控制：新创建的用户，默认情况下是没有任何权限的，因此需要给用户分配权限 grant 权限 on 数据库.数据表 to &apos;用户&apos;@&apos;主机名&apos;; // 例：给 haha 分配所有的权限 grant all on *.* to &apos;haha&apos;@&apos;%&apos;; 其中 *.* 表示所有的数据库和数据表均可以访问，% 表示可以任意远端IP均可通过该用户连接数据库。 精准的控制用户的权限 grant 权限 on 数据库.数据表 to &apos;用户&apos;@&apos;主机名&apos;; //这个时候 haha 就具有查询d1中的tab1的权限了。 grant select on d1.tab1 to &apos;haha&apos;@&apos;%&apos;; 再比如： mysql&gt;grant select,insert,update,delete,create,drop on d1.tab1 to haha@192.168.0.100 identified by ‘123456′; 给来自192.168.0.100的用户haha分配可对数据库d1的tab1表进行select,insert,update,delete,create,drop等操作的权限，并设定口令为123456。 如果用户在授权操作时出现如下问题： ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;%&apos; (using password: YES) 那么这不是因为密码错误导致的，而是因为该用户没有授权其他用户的权限，因此，出现错误，授权失败。 可以如下操作进行修改改用户授权权限： mysql&gt; use mysql; mysql&gt; update mysql.user set Grant_priv=&apos;Y&apos; where User=&apos;root&apos; and Host=&apos;localhost&apos;; mysql&gt; flush privileges; 刷新完成后，退出并重新登录，该用户就可以正常给其他用户进行数据库授权操作了。 权限撤回：revoke 权限 on 数据库.数据表 from &apos;用户&apos;@&apos;主机名&apos;; // 收回 haha 的所有权限 revoke all on *.* from &apos;haha&apos;@&apos;%&apos;; 密码修改：(三种方法)方法1： 用SET PASSWORD命令 首先登录MySQL。 格式：mysql&gt; set password for 用户名@localhost = password(‘新密码’); 例子：mysql&gt; set password for root@localhost = password(&apos;123&apos;); 方法2：用mysqladmin 格式：mysqladmin -u用户名 -p旧密码 password 新密码 例子：mysqladmin -uroot -p123456 password 123 方法3：用UPDATE直接编辑user表 首先登录MySQL。 mysql&gt; use mysql; mysql&gt; update user set password=password(&apos;123&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;; mysql&gt; flush privileges; MySQL中root用户无法登陆有时新安装的MySQL服务器，默认root用户未设置密码，因此无法进行正常的root用户登录操作。 解决方法： 命令行下 切换当前用户为root权限： $ sudo su 进入MySQL默认安装路径，默认位置为：/etc/mysql/ 打开debian.cnf: $ gedit debian.cnf 找到其中的 user 和 password 字段，然后用此user和password进行MySQL的登录操作。 MySQL登录状态下，修改root用户密码： mysql&gt; use mysql; mysql&gt; UPDATE user SET authentication_string= password(‘123456’) WHERE User=’root’; 退出并重启MySQL即可使其设置生效。 MySQL密码重置有时候我们可能会忘记或丢失数据库链接密码，因此注意修改或重置root密码的方法也是十分必要的。 同样修改配置文件： $ sudo vi /etc/mysql/my.cnf 在[mysqld]段中加入一行“skip-grant-tables” $ sudo service mysql restart 重启mySQL服务 $ sudo mysql -u root 然后进行用户添加、授权、修改等一系列操作之后，退出数据库管理状态。 最后将刚才在配置文件中添加的代码删除或者注释，然后重启MySQL服务器，配置好新的用户名和密码，即可正常使用。 $ sudo vim /etc/mysql/my.cnf 把刚才加入的那一行“skip-grant-tables”注释或删除 $ sudo service mysql restart OK，搞定！ MySQL指令简单使用 show databases; 查看当前的数据库。 show tables; 显示当前数据库的表单 use tablename; 切换到tablename数据库 select * from tablename; 查看表中所有的数据和结构 Windows下MySQL中文乱码情况处理如果在Windows下使用MySQL时，出现中文乱码的情况，可以进行如下设置： 在安装目录（或者是ProgramData目录下的MySQL安装目录）下，找到my.ini，设置为 character-set-server=utf8 通过代码设置，显示出来所有的设置项目。把其中的非UTF8的编码都设置成utf8： show VARIABLES like ‘character_%’; set character_set_server=utf8; 如果在Java端通信数据的时候发生了乱码，设置response的统一字符编码即可： response.setCharacterEncoding(“utf-8”); MySQL卸载和删除命令apt-get删除mysql $ sudo apt-get remove --purge mysql-\\* 手动删除mysql剩余文件 $ sudo find / -name mysql -print 显示出所有的含有mysql文件名的路径，如下： /var/lib/mysql /var/lib/mysql/mysql /var/log/mysql /usr/bin/mysql /usr/lib/mysql /usr/share/mysql /etc/mysql /etc/init.d/mysql 接下来一一删除：执行命令 $ sudo rm -rf /ect/init.d/mysql 直到全部删除。 如果想要重新安装，那么重新执行全新安装的步骤即可。过程中如果报错，可忽略，然后重新执行一次安装代码。 结语在实际使用中，可能还会出现一些其它的意想不到的错误，本文只是总结了本人在测试环境和实际项目(云服务器)中遇到的一些问题，可能也非典型问题，仅供参考。","tags":[]},{"title":"Git指令的简单有效使用","date":"2018-03-13T10:30:06.000Z","path":"2018/03/13/3/","text":"Git简介目前在开发和项目管理中，github和gitlab、码云等等一系列的分布式代码托管服务器成为主流的分布式管理仓库。现在我将重点给大家介绍git仓库托管如何使用及高效、无异常的使用方法。 创建本地新仓库 进入本地的项目目录，右键“Git Bash here”,调出git命令行界面，然后输入 $ git init 就是将目录下的所有文件上传，也可以将“.”换成具体的文件名 $ git add . 将项目提交到gitHub $ git commit -m “注释语句” 在github上创建新的repository，步骤此处不再详细描述 点击 “Create repository”跳转到一个连接，获取到本项目的github地址(https地址或者ssh地址) 将本地的代码关联到github上 $ git remote add origin 项目的github地址 上传代码到github之前需要先pull $ git pull origin master 上传代码到远程仓库 $ git push -f origin master 注释： origin 远程仓库名， master 分支名， -f 为force，意为：强行、强制。 查看当前branch列表 $ git branch -a 这个是查看全部branch，包括远程和本地，-a其实就是all $ git branch -r 查看远程，-r==romote $ git branch -l 查看本地，-l==local 切换的话，直接 git checkout [branch-name] 即可。 注：切换branch前最好将你现在的branch代码commit，以防代码丢失。 同步fork到自己仓库的源仓库代码更新 首先 把别人的仓库添加到你的上游远程，通常命名为 upstream。操作一次就可以了。 $ git remote add upstream 原作者仓库地址 此时再用 git remote -v 就可以看到一个origin是你的，另外一个upstream是原作者的。 其次 更新代码 $ git fetch upstream 拉去原作者的仓库更新。 $ git checkout master 切换到自己的master $ git merge upstream/master merge或者rebase到你的master 最后不要忘了把merge后的代码提交到自己的仓库中。 SSH证书的使用简介SSH是目前较可靠，转为远程登录会话和其他网络服务提供安全的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。 Git就采用了SSH加密传输协议，加密传输的算法有很多，git可以使用RSA，RSA的核心就是使用一对特定的数字，使用其中一个数字可以用来加密，而另外一个数字可以用来解密。 这两个数字就是你在使用git、github和gitlab的时候所遇到的public key 也就是公钥以及private key 私钥。公钥是用来加密的数字，这也就是为什么本级生成了公钥之后，要上传到gitlab、GitHub的原因。从GitHub或gitlab发回来的用公钥加密过的数据，可以用你本地的私钥来还原。如果key丢失，不管是公钥还是私钥，丢失哪一个都不能用，需要重新生成一次然后在gitlab账户中再设置一次就可以了。 生成SSH KEY你可以按如下命令来生成 sshkey: $ ssh-keygen -t rsa -C “xxxxx@xxxxx.com“ 接着会提示你输入密码（这个没有必要输入，我本人没有输入），点击三次回车，然后执行到出现一个矩形框的时候，SSH KEY生成成功 查看你的 public key，生成后存放在“用户文件夹”下的“.ssh”文件夹下，一般为隐藏文件夹。也可以命令行查看： $ cat ~/.ssh/id_rsa.pub 把公钥id_rsa.pub里面的内容，添加到git账号下。详细操作此处不做描述。 添加后，在终端（Terminal）中输入 $ ssh -T git@gitee.com 若返回 Welcome to Gitee.com, yourname! 则证明添加成功。若不成功，根据提示信息进行排除问题： 一般常见问题： 1. ssh密钥生成错误，可以重新生成一次； 2. .ssh文件夹权限问题，最好是新建，而非直接从别处复制粘贴过来。 3. 未加载ssh密钥服务。退出git命令行或客户端，重新打开。 Git多用户账户配置某些情况下，一台开发电脑可能会同时连接多个代码仓库，而同一个ssh密钥只能分配给唯一的git账户使用。因此配置多用户密钥服务十分必要。 在.shh目录下，创建config文本文件（无后缀名），输入以下内容： //# 配置git.oschina.net Host gitee.com HostName gitee.com IdentityFile /home/.ssh/id_rsa_oschina PreferredAuthentications publickey User GyWfnh //# 配置git.oschina.net Host gitee.com.xxx HostName gitee.com IdentityFile /home/.ssh/id_rsa_xxx PreferredAuthentications publickey User GyWfnh // 此条配置下的repository url要修改为https：//gitee.com.xxx......或者git@gitee.com.xxx...... 注：创建config文件时，要把上面的 # 前面的 // 去掉 配置Git账号的用户名和邮箱全局配置Git用户名和邮箱： $ git config –global user.name “xxx” $ git config –global user.email “xxx@xxx.com“ 配置局部Git用户名和邮箱： git config user.name “xxx” git config user.email “xxx@xxx.com“","tags":[]},{"title":"BlueLake博客主题配置","date":"2018-03-12T09:30:30.000Z","path":"2018/03/12/2/","text":"开始之前BlueLake主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。 Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。 1. 安装您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。 1.1 安装主题在根目录下打开终端窗口： git bash $ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake 1.2 安装主题渲染器BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。 git bash $ npm install hexo-renderer-jade@0.3.0 --save $ npm install hexo-renderer-stylus --save 1.3 启用主题打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。 根_config.yml theme: BlueLake 1.4 验证首先启动 Hexo 本地站点，并开启调试模式： git bash $ hexo s --debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出： INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 1.5 更新主题今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。 git bash $ cd themes/BlueLake $ git pull 2. 配置2.1 配置网站头部显示文字打开根_config.yml，找到： 根_config.yml title: subtitle: description: author: title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。 2.2 设置语言该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下： 根_config.yml language: zh-CN 2.3 设置菜单打开主题_config.yml，找到： 主题_config.yml menu: - page: home directory: . icon: fa-home - page: archive directory: archives/ icon: fa-archive # - page: about # directory: about/ # icon: fa-user - page: rss directory: atom.xml icon: fa-rss 主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。 每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置. 若不需要about页面，只需要如下配置就好： 主题_config.yml # About page about: email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 github_url: ## github主页链接地址 2.3.1 添加about页此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面： git bash $ hexo new page &apos;about&apos; 打开主题_config.yml，补全关于我页面的详细信息： 主题_config.yml # About page about: photo_url: ## 头像的链接地址 email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 weibo_name: ## 微博用户名 github_url: ## github主页链接地址 github_name: ## github用户名 当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件在根目录下打开命令行窗口： git bash $ npm install hexo-generator-feed --save $ npm install hexo-generator-sitemap --save $ npm install hexo-generator-baidu-sitemap --save 添加主题_config.yml配置： 主题_config.yml Plugins: hexo-generator-feed hexo-generator-sitemap hexo-generator-baidu-sitemap feed: type: atom path: atom.xml limit: 20 sitemap: path: sitemap.xml baidusitemap: path: baidusitemap.xml 2.4 添加本地搜索默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件： git bash $ npm install hexo-generator-json-content@2.2.0 --save 然后在根_config.yml添加配置： 根_config.yml jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最后在主题_config.yml添加配置： 主题_config.yml local_search: true 2.5 修改站点图标站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。 您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。 您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。 2.6 添加站点关键字请在hexo目录的根_config.yml中添加keywords字段，如： 根_config.yml # Site title: Hexo subtitle: 副标题 description: 网站简要描述,如：Charles·Zheng&apos;s blog. keywords: 网站关键字, key, key1, key2, key3 author: Charles language: zh-CN 2.7 其他配置主题_config.yml的其他配置 show_category_count ——是否显示分类下的文章数。 widgets_on_small_screens ——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。 主题_config.yml show_category_count: true widgets_on_small_screens: true 3.集成第三方服务3.1 添加评论目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。 注册并获得代码： 若使用多说评论，注册多说后获得short_name。 若使用Disqus评论，注册Disqus后获得short_name。 若使用来必力评论，注册来必力,获得data-uid。 若使用友言评论，注册友言,获得uid。 若使用网易云跟帖评论，注册网易云跟帖,获得productKey。 若使用畅言评论，注册畅言，获得appid，appkey。 配置主题_config.yml： 主题_config.yml： #Cmments comment: duoshuo: ## duoshuo_shortname disqus: ## disqus_shortname livere: ## 来必力(data-uid) uyan: ## 友言(uid) cloudTie: ## 网易云跟帖(productKey) changyan: ## 畅言需在下方配置两个参数，此处不填。 appid: ## 畅言(appid) appkey: ##畅言(appkey) 3.2 百度统计登录百度统计，定位到站点的代码获取页面。 复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000) 配置主题_config.yml: baidu_analytics: 8006843039519956000 注意： baidu_analytics不是你的百度id或者百度统计id.如若使用谷歌统计，配置方法与百度统计类似。 3.3 卜算子阅读次数统计主题_config.yml busuanzi: true 若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。 3.4 微博秀微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。 登录微博开放平台，选择微博秀。 为了与主题风格统一，作如下配置 基础设置：高400px；勾选宽度自适应；颜色选择白色； 样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8； 模块设置：去掉标题、边框、粉丝的勾选框，只留微博。 复制代码里src=””里引号包裹的内容，替换到layout/_widget/weibo.jade weibo.jade .widget .widget-title i(class=&apos;fa fa-weibo&apos;)= &apos; &apos; + __(&apos;新浪微博&apos;) iframe(width=&quot;100%&quot;,height=&quot;400&quot;,class=&quot;share_self&quot;,frameborder=&quot;0&quot;,scrolling=&quot;no&quot;,src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;) 这只是为了和主题的风格统一，当然您也可以自由随意发挥。 注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。","tags":[]},{"title":"Hexo的安装配置和搭建","date":"2018-03-12T08:28:58.000Z","path":"2018/03/12/1/","text":"Hexo概述Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 $ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 Mac 用户您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。 安装 Git Windows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core Windows 用户下载git for windows会比较缓慢，请耐心等待一下。或者可以去第三方应用商店下载。 安装 Node.js安装 Node.js 的最佳方式是使用 nvm。 cURL: $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 或者 $ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash 安装完成后，重启终端并执行下列命令即可安装 Node.js。 $ nvm install stable Windows 用户 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。 另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。 由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。 Ubuntu用户 第一步，去 nodejs 官网 https://nodejs.org 看最新的版本号； 第二步，添加源后安装重点来了，nodejs 的每个大版本号都有相对应的源，比如这里的 10.x.x版本的源是https://deb.nodesource.com/setup_10.x。 所以在终端执行： $ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - 或者 $ curl -sL https://deb.nodesource.com/setup_10.x | bash 稍等片刻，源已经添加完毕，再执行： $ sudo apt-get install -y nodejs 顺带一提，如果你要安装12.x.x 的版本，只需要修改添加源地址中的数字即可，比如： $ curl -sL https://deb.nodesource.com/setup_12.x | bash 最后验证一下，执行：nodejs -v 即可出现刚才安装的版本号。 $ nodejs -v 安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 $ npm install -g hexo-cli Hexo初始化安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 $ hexo init $ cd $ npm install 新建完成后，指定文件夹的目录如下： . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml 网站的 配置 信息，您可以在此配置大部分的参数。 package.json 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 scaffolds 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 source 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。 Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes 主题 文件夹。Hexo 会根据主题来生成静态页面。 更详细介绍请参考此处。 服务器hexo-server Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用。 $ npm install hexo-server –save 安装完成后，输入下面的命令以启动服务器 $ hexo server 您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。 如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下： $ hexo server -p 5000 静态模式 在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 hexo generate，此模式通常用于生产环境（production mode）下。 $ hexo server -s 自定义 IP 服务器默认运行在 0.0.0.0，您可以覆盖默认的 IP 设置，如下： $ hexo server -i 192.168.1.1 指定这个参数后，您就只能通过该IP才能访问站点。如果您指定一个局域网IP作为-i参数的值，那么就无法通过公网来访问站点。 生成文件使用 Hexo 生成静态文件快速而且简单。 $ hexo generate 监视文件变动 Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。 $ hexo generate –watch 完成后部署 您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。 $ hexo generate –deploy $ hexo deploy –generate 简写 上面两个命令可以简写为 $ hexo g -d $ hexo d -g 部署Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。 $ hexo deploy 在开始之前，您必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如： deploy: type: git 您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 deploy: - type: git repo: - type: heroku repo: 缩进 YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。 Git 安装 hexo-deployer-git。 $ npm install hexo-deployer-git --save 修改配置。 deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] 参数 描述 repo 库（Repository）地址 branch 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 message 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}) Heroku 安装 hexo-deployer-heroku。 $ npm install hexo-deployer-heroku --save 修改配置。 deploy: type: heroku repo: &lt;repository url&gt; message: [message] 参数 描述 repo Heroku 库（Repository）地址 message 自定提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}) Rsync 安装 hexo-deployer-rsync。 $ npm install hexo-deployer-rsync --save 修改配置。 deploy: type: rsync host: &lt;host&gt; user: &lt;user&gt; root: &lt;root&gt; port: [port] delete: [true|false] verbose: [true|false] ignore_errors: [true|false] 参数 描述 默认值 host 远程主机的地址 user 使用者名称 root 远程主机的根目录 port 端口 22 delete 删除远程主机上的旧文件 true verbose 显示调试信息 true ignore_errors 忽略错误 false rsync部署模块的工作方式 需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的port，的确是指rsync监听的端口，请确保防火墙打开了该端口。 OpenShift 安装 hexo-deployer-openshift。 $ npm install hexo-deployer-openshift --save 修改配置。 deploy: type: openshift repo: &lt;repository url&gt; message: [message] 参数 描述 repo OpenShift 库（Repository）地址 message 自定提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}) FTPSync 安装 hexo-deployer-ftpsync。 $ npm install hexo-deployer-ftpsync --save 修改配置。 deploy: type: ftpsync host: &lt;host&gt; user: &lt;user&gt; pass: &lt;password&gt; remote: [remote] port: [port] ignore: [ignore] connections: [connections] verbose: [true|false] 参数 描述 默认值 host 远程主机的地址 user 使用者名称 pass 密码 remote 远程主机的根目录 / port 端口 21 ignore 忽略的文件或目录 connections 使用的连接数 1 verbose 显示调试信息 false FTP部署可能出现的问题 您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。 其他方法 Hexo 生成的所有文件都放在 public 文件夹中，您可以将它们复制到您喜欢的地方。 结语更多详细配置请移步此处：https://hexo.io/zh-cn/docs/","tags":[]}]